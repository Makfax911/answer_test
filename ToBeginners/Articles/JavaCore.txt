В статье мы обзорно рассмотрим следующие основные части Java Core:
1. Базовые конструкции
2. Объектно-ориентированное программирование
3. Введение в Swing
4. Обобщённое программирование
5. Коллекции (JFC)
6. Исключения (Exception)
7. Потоки ввода-вывода
8. Многопоточное программирование

1. Базовые конструкции

Если имеется опыт программирования на С/C++, то первое знакомство будет несложным, поскольку базовый синтаксис этих языков очень похож.

Изучение начинается с написания простейшей программы, типа HelloWorld, выводящей в консоль строку приветствия. Вводится понятия класс и метод. Обсуждаются переменные и константы, их типы и основы работы с ними. Массивы. Работа со строками, как объектами, String API. Арифметические и логические операции и выражения. Команды для написания нелинейных программ, включающие в себя: условный оператор if-else, тернарный оператор, оператор множественного выбора switch, циклы с определенным числом повторений for, включая его вариант for each, c неопределенным числом повторений while и do-while. Операторы для изменения порядка выполнения break и continue. Введение в пакетную систему Java, импорт классов, создание объектов, вызов статических и нестатических методов.

Получение навыков по установке и настройке JDK, вызову компилятора и виртуальной машины JVM в командной строке – также относятся к этому разделу.

Материал по этому разделу можно найти в книгах:
- Java. Библиотека профессионала. Том 1, Хорстманн, глава 3
- Java 8. Полное руководство, Шилдт, главы 3, 4, 5

2. Объектно-ориентированное программирование

Объектно-ориентированное программирование (ООП) в настоящее время активно вытесняет “структурные” и “процедурные” подходы, разработанные в 1970-х годах, фактически становясь доминирующей методикой. Java – это объектно-ориентированный язык, и для его продуктивного использования необходимо владеть ООП. Для ООП требуется иной образ мышления по сравнению с подходом, типичным для процедурных языков.

Изучение ООП начинается с рассмотрения класса – элемента, составляющего основу Java. Поля класса содержат данные, методы – код. Методы могут иметь параметры и возвращать значения. Конструкторы – особые методы. Объекты создаются на основании классов. Инкапсуляция – первый принцип ООП подразумевает связывание и сокрытие. Изучаются модификаторы полей и методов: public, protected, private. Вводится понятие перегрузки методов. Затем рассматривается понятия и механизмы наследования и полиморфизма. Уясняется разница между статическими полями и методами и нестатическими. Обсуждаются абстрактные классы и методы, вводится понятие интерфейса.

Материал по этому разделу можно найти в книгах:
- Java. Библиотека профессионала. Том 1, Хорстманн, главы 4, 5, 6
- Java 8. Полное руководство, Шилдт, главы 6, 7, 8

3. Введение в Swing

Swing – это набор классов для создания графического интерфейса пользователя (GUI) в Java программах. В сравнении с ранее использовавшейся библиотекой AWT, библиотека Swing имеет ряд преимуществ, а именно:
- богатый набор интерфейсных примитивов
- настраивающийся внешний вид на различных платформах (look and feel)
- раздельная архитектура модель-вид (model-view)
- встроенная поддержка HTML

Изучение Swing начинается с написания пустого окна на основании класса JFrame. Затем изучается назначение JPanel, JLabel, JButton и других элементов библиотеки java.awt. Размещение элементов с помощью BorderLayout и других компоновщиков. Обработка кликов по кнопке и кликов мыши по элементу. Рисование на JPanel.

Материал по этому разделу можно найти в книгах:
- Java. Библиотека профессионала. Том 1, Хорстманн, главы 10, 11, 12
- Java 8. Полное руководство, Шилдт, главы 31, 32, 33

4. Обобщённое программирование

Обобщения – это параметризованные типы. Они позволяют объявлять классы, интерфейсы и методы, где тип данных указан в виде параметра. Используя обобщения, можно, например, создать единственный класс, который будет правильно обрабатывать данные разных типов. Классы, интерфейсы или методы, оперирующие параметризированными типами, называют обобщёнными.

Обобщения позволяют писать более безопасный код, который читается легче, чем код, перегруженный переменными типа Object и приведениями типов. Обобщения особенно полезны для классов коллекций вроде вездесущего ArrayList.

Материал по этому разделу можно найти в книгах:
- Java. Библиотека профессионала. Том 1, Хорстманн, глава 8
- Java 8. Полное руководство, Шилдт, глава 14

5. Коллекции (JFC)

Пакет java.util содержит, помимо прочего, библиотеку коллекций (Java Collection Framework или JCF), позволяющую работать с множествами, хэш-таблицами, разными видами списков и так далее.

Коллекция – это объект, способный хранить группу однотипных элементов. Она также содержит методы для операций с данными. Основные преимущества классов JCF (перед классами, которые можно разработать самостоятельно) следующие:

- ускоряется процесс разработки и улучшается качество кода;
- обеспечивается поддержка повторного использования кода;
- производится стандартизация интерфейса ваших классов;
- реализуется поддержка многопоточного доступа.

Основу библиотеки составляют открытые интерфейсы, которые можно использовать для создания собственных коллекций. Каждый интерфейс объявляет набор методов, которые необходимо реализовать в своей программе:

- Collection - группа элементов (охватывает Set и List);
- Set - множество элементов (без дублирования);
- SortedSet - то же самое, что Set, только элементы упорядочены;
- List - упорядоченный список;
- Map - словарь, где которой каждый элемент имеет уникальный ключ;
- SortedMap - то же, что и Map, однако элементы упорядочены;
- Queue - интерфейс для работы с очередью.

Разумеется, интерфейсы были бы «пустыми», если бы не существовало встроенных классов, реализующих необходимые функции:

- ArrayList - список List как массив элементов;
- LinkedList - список List, выполняющий функции связанного списка;
- HashSet - множество Set как хэш-таблица;
- TreeSet - множество SortedSet, используемое как дерево;
- HashMap - индексированный словарь хэш;
- TreeMap - коллекция SortedMap древовидной структуры.

Материал по этому разделу можно найти в книгах:
- Java. Библиотека профессионала. Том 1, Хорстманн, глава 9
- Java 8. Полное руководство, Шилдт, глава 18

6. Исключения (Exception)

В мире программирования возникновение ошибок и непредвиденных ситуаций при выполнении программы называют исключением. В программе исключения могут возникать в результате неправильных действий пользователя, отсутствии необходимого ресурса на диске, или потери соединения с сервером по сети. Причинами исключений при выполнении программы также могут быть ошибки программирования или неправильное использование API. Ваша программа должна четко знать, как поступать в такой ситуации. Для этого в Java предусмотрен механизм исключений.

При возникновении ошибки в процессе выполнения программы JVM создает объект нужного типа из иерархии исключений Java – множества возможных исключительных ситуаций, унаследованных от общего «предка» – класса Throwable. Исключение можно также создать вручную, с помощью оператора throw. При этом выполнение основного кода программы прерывается, а обработчик исключений JVM пытается найти способ обработать исключение.

Блоки кода, для которых предусмотрена обработку исключений в Java, создаются с помощью конструкций try{}catch, try{}catch{}finally, try{}finally{}.

При возбуждении исключения в блоке try обработчик исключения ищется в следующем за ним блоке catch. Если в catch есть обработчик данного типа исключения – управление переходит к нему. Если нет, то JVM ищет обработчик этого типа исключения в цепочке вызовов методов до тех пор, пока не будет найден подходящий catch. 

После выполнения блока catch управление передается в необязательный блок finally. В случае, если подходящий блок catch не найден, JVM останавливает выполнение программы, и выводит стек вызовов методов – stack trace, выполнив перед этим код блока finally при его наличии.

Материал по этому разделу можно найти в книгах:
- Java. Библиотека профессионала. Том 1, Хорстманн, глава 7
- Java 8. Полное руководство, Шилдт, глава 10

7. Потоки ввода-вывода

Основной функционал работы с потоками ввода-вывода сосредоточен в классах из пакета java.io.

Ключевым здесь является понятие потока. В программировании это может обозначать множество различных концепций. Применительно к работе с файлами и вводом-выводом мы говорим о потоке (stream) который используется для чтения или записи информации (файлов, сокетов, консоли и так далее).

Поток связан с реальным физическим устройством с помощью системы ввода-вывода Java. Можно быть определен поток, который связан с файлом и через который возможно читать или записывать файл. Или это может быть поток, связанный с сетевым сокетом, с помощью которого получают или отправляют данные по сети. Все эти задачи: чтение и запись различных файлов, обмен информацией по сети, ввод-вывод в консоли решаются в Java с помощью потоков.

Объект, из которого можно считать данные, называется потоком ввода, а объект, в который можно записывать данные – потоком вывода. Например, если надо прочитать содержимое файла, то применяется поток ввода, а если надо что-то записать в файл – поток вывода.

Материал по этому разделу можно найти в книгах:
- Java. Библиотека профессионала. Том 2, Хорстманн, глава 2
- Java 8. Полное руководство, Шилдт, главы 13, 20, 21

8. Многопоточное программирование

Большинство языков программирования поддерживают такую важную функциональность как многопоточность, и Java не исключение. При помощи многопоточности мы можем создать в приложении несколько потоков, которые будут выполнять различные задачи одновременно. Если у нас, допустим, графическое приложение, которое посылает запрос к какому-нибудь серверу или считывает и обрабатывает огромный файл, то без многопоточности у нас бы блокировался графический интерфейс на время выполнения задачи. А благодаря потокам мы можем выделить отправку запроса или любую другую задачу, которая может долго обрабатываться, в отдельный поток. Поэтому большинство реальных приложений практически не мыслимы без многопоточности.

Создать новый поток можно двумя способами:
- с помощью интерфейса Runnable, создав класс, реализующий этот интерфейс
- наследованием от класса Thread. Это даёт больше гибкости при работе с потоками, благодаря методам класса Thread

Материал по этому разделу можно найти в книгах:
- Java. Библиотека профессионала. Том 1, Хорстманн, глава 14
- Java 8. Полное руководство, Шилдт, глава 11

Полезные ссылки:
https://proselyte.net/tutorials/java-core/
http://kharkovitcourses.blogspot.com/p/java-core-course.html
https://javarush.ru/groups/posts/765-java-core-voprosih-k-sobesedovaniju-ch-1
https://codengineering.ru/q/what-is-the-difference-between-java-and-core-java-5477
